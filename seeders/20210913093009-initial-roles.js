const { PermissionLevel, } = require('invest-models');

function getCurrentTimestamp() {
  return new Date();
}

module.exports = {
  up: async (queryInterface, Sequelize) => {
    const t = await queryInterface.sequelize.transaction();
    try {
      const roles = [{
        key: 'superadmin',
        globalSettings: PermissionLevel.READ,
        news: PermissionLevel.WRITE,
        notificationsFromUsers: PermissionLevel.WRITE,
        notificationsForUsers: PermissionLevel.WRITE,
        accountsOperations: PermissionLevel.READ,
        signaturesVerification: PermissionLevel.READ,
        registryLookup: PermissionLevel.READ,
        reports: PermissionLevel.READ,
        users: PermissionLevel.WRITE,
        documentsRegistry: PermissionLevel.READ,
        borrowers: PermissionLevel.WRITE,
        investors: PermissionLevel.WRITE,
        support: PermissionLevel.READ,
        permissionLevels: PermissionLevel.WRITE,
        creditAgreements: PermissionLevel.READ,
        legalOpinions: PermissionLevel.READ,
        decisionsOnApplications: PermissionLevel.READ,
        platformDocuments: PermissionLevel.READ,
        faq: PermissionLevel.READ,
        rosFinVerification: PermissionLevel.READ,
        expressLoan: PermissionLevel.READ,
        admins: PermissionLevel.WRITE,
        loans: PermissionLevel.WRITE,
        profile: PermissionLevel.WRITE,
        createdAt: getCurrentTimestamp(),
        updatedAt: getCurrentTimestamp(),
      },
      {
        key: 'admin',
        globalSettings: PermissionLevel.READ,
        news: PermissionLevel.WRITE,
        notificationsFromUsers: PermissionLevel.WRITE,
        notificationsForUsers: PermissionLevel.WRITE,
        accountsOperations: PermissionLevel.READ,
        signaturesVerification: PermissionLevel.READ,
        registryLookup: PermissionLevel.READ,
        reports: PermissionLevel.READ,
        users: PermissionLevel.WRITE,
        documentsRegistry: PermissionLevel.READ,
        borrowers: PermissionLevel.WRITE,
        investors: PermissionLevel.WRITE,
        support: PermissionLevel.WRITE,
        permissionLevels: PermissionLevel.READ,
        creditAgreements: PermissionLevel.READ,
        legalOpinions: PermissionLevel.READ,
        decisionsOnApplications: PermissionLevel.READ,
        platformDocuments: PermissionLevel.WRITE,
        faq: PermissionLevel.WRITE,
        rosFinVerification: PermissionLevel.READ,
        expressLoan: PermissionLevel.READ,
        admins: PermissionLevel.WRITE,
        loans: PermissionLevel.WRITE,
        profile: PermissionLevel.WRITE,
        createdAt: getCurrentTimestamp(),
        updatedAt: getCurrentTimestamp(),
      },
      {
        key: 'credit_officer',
        globalSettings: PermissionLevel.READ,
        news: PermissionLevel.READ,
        notificationsFromUsers: PermissionLevel.WRITE,
        notificationsForUsers: PermissionLevel.WRITE,
        accountsOperations: PermissionLevel.READ,
        signaturesVerification: PermissionLevel.WRITE,
        registryLookup: PermissionLevel.WRITE,
        reports: PermissionLevel.WRITE,
        users: PermissionLevel.READ,
        documentsRegistry: PermissionLevel.READ,
        borrowers: PermissionLevel.READ,
        investors: PermissionLevel.READ,
        support: PermissionLevel.WRITE,
        permissionLevels: PermissionLevel.NONE,
        creditAgreements: PermissionLevel.READ,
        legalOpinions: PermissionLevel.READ,
        decisionsOnApplications: PermissionLevel.READ,
        platformDocuments: PermissionLevel.READ,
        faq: PermissionLevel.READ,
        rosFinVerification: PermissionLevel.WRITE,
        expressLoan: PermissionLevel.WRITE,
        admins: PermissionLevel.READ,
        loans: PermissionLevel.READ,
        profile: PermissionLevel.READ,
        createdAt: getCurrentTimestamp(),
        updatedAt: getCurrentTimestamp(),
      },
      {
        key: 'lawyer',
        globalSettings: PermissionLevel.READ,
        news: PermissionLevel.READ,
        notificationsFromUsers: PermissionLevel.WRITE,
        notificationsForUsers: PermissionLevel.WRITE,
        accountsOperations: PermissionLevel.READ,
        signaturesVerification: PermissionLevel.WRITE,
        registryLookup: PermissionLevel.WRITE,
        reports: PermissionLevel.WRITE,
        users: PermissionLevel.READ,
        documentsRegistry: PermissionLevel.READ,
        borrowers: PermissionLevel.READ,
        investors: PermissionLevel.READ,
        support: PermissionLevel.WRITE,
        permissionLevels: PermissionLevel.NONE,
        creditAgreements: PermissionLevel.READ,
        legalOpinions: PermissionLevel.WRITE,
        decisionsOnApplications: PermissionLevel.READ,
        platformDocuments: PermissionLevel.READ,
        faq: PermissionLevel.READ,
        rosFinVerification: PermissionLevel.WRITE,
        expressLoan: PermissionLevel.READ,
        admins: PermissionLevel.READ,
        loans: PermissionLevel.READ,
        profile: PermissionLevel.READ,
        createdAt: getCurrentTimestamp(),
        updatedAt: getCurrentTimestamp(),
      },
      {
        key: 'manager',
        globalSettings: PermissionLevel.WRITE,
        news: PermissionLevel.WRITE,
        notificationsFromUsers: PermissionLevel.WRITE,
        notificationsForUsers: PermissionLevel.WRITE,
        accountsOperations: PermissionLevel.WRITE,
        signaturesVerification: PermissionLevel.WRITE,
        registryLookup: PermissionLevel.WRITE,
        reports: PermissionLevel.WRITE,
        users: PermissionLevel.WRITE,
        documentsRegistry: PermissionLevel.WRITE,
        borrowers: PermissionLevel.WRITE,
        investors: PermissionLevel.WRITE,
        support: PermissionLevel.WRITE,
        permissionLevels: PermissionLevel.READ,
        creditAgreements: PermissionLevel.READ,
        legalOpinions: PermissionLevel.READ,
        decisionsOnApplications: PermissionLevel.WRITE,
        platformDocuments: PermissionLevel.WRITE,
        faq: PermissionLevel.WRITE,
        rosFinVerification: PermissionLevel.WRITE,
        expressLoan: PermissionLevel.WRITE,
        admins: PermissionLevel.READ,
        loans: PermissionLevel.READ,
        profile: PermissionLevel.READ,
        createdAt: getCurrentTimestamp(),
        updatedAt: getCurrentTimestamp(),
      }
      ];
      await queryInterface.bulkInsert('AdminRoles', roles, { transaction: t, });
      await t.commit();
    }
    catch (e) {
      console.log(e);
      await t.rollback();
    }
  },

  down: async (queryInterface, Sequelize) => {
    const t = await queryInterface.sequelize.transaction();
    await queryInterface.bulkDelete('AdminRoles', null, { transaction: t, });
    await t.commit();
  },
};
